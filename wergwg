#include <iostream>
#include <vector>

using namespace std;

// Function to merge two halves
void merge(vector<int>& arr, vector<int>& left, vector<int>& right) {
    int i = 0, j = 0, k = 0;

    // Compare elements from both halves and merge them in sorted order
    while (i < left.size() && j < right.size()) {
        if (left[i] <= right[j]) {
            arr[k++] = left[i++];
        } else {
            arr[k++] = right[j++];
        }
    }

    // Copy the remaining elements of left[], if there are any
    while (i < left.size()) {
        arr[k++] = left[i++];
    }

    // Copy the remaining elements of right[], if there are any
    while (j < right.size()) {
        arr[k++] = right[j++];
    }
}

// Function to implement Merge Sort recursively
void mergeSort(vector<int>& arr) {
    if (arr.size() < 2) {
        return;
    }

    int mid = arr.size() / 2;
    vector<int> left(arr.begin(), arr.begin() + mid);
    vector<int> right(arr.begin() + mid, arr.end());

    // Recursively sort the two halves
    mergeSort(left);
    mergeSort(right);

    // Merge the sorted halves
    merge(arr, left, right);
}

int main() {
    vector<int> arr = {38, 27, 43, 3, 9, 82, 10};

    cout << "Original array: ";
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;

    mergeSort(arr);

    cout << "Sorted array: ";
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}
